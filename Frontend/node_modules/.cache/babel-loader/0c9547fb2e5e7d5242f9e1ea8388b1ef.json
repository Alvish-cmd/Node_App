{"ast":null,"code":"import { useState } from \"react\";\n\n// const LOWER_A_KEYCODE = 97;\nconst UPPER_A_KEYCODE = 65;\nconst LOWER_Z_KEYCODE = 122;\n// const UPPER_Z_KEYCODE = 90;\nconst ZERO_KEYCODE = 48;\nconst NINE_KEYCODE = 57;\nconst useOTP = _ref => {\n  let {\n    autoFocus,\n    value,\n    otpType,\n    onChange,\n    OTPLength\n  } = _ref;\n  const [activeInput, setActiveInput] = useState(autoFocus ? 0 : -1);\n  const getOtpValue = () => value ? value.toString().split(\"\") : [];\n\n  // Helper to return OTP from input\n  const handleOtpChange = otp => {\n    let otpValue = otp.join(\"\");\n    // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  const focusInput = input => {\n    const nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  const focusInputByDirection = function () {\n    let direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"next\";\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  const changeActiveInputValue = _ref2 => {\n    let [nextValue] = _ref2;\n    const otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = (e, data) => {\n    e.preventDefault();\n    const otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const clipboardData = process.env.NODE_ENV === \"test\" ? data.slice(0, OTPLength - activeInput).split(\"\") : e.clipboardData.getData(\"text/plain\").slice(0, OTPLength - activeInput).split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (let pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    // Pass copied value through onChange rules\n    let filteredOtpValue = [otp.length];\n    let validCharIndex = 0;\n    for (let charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = otp[charIndex];\n        validCharIndex++;\n      }\n    }\n    handleOtpChange(filteredOtpValue);\n  };\n  const isValidateChar = char => {\n    switch (otpType) {\n      case \"number\":\n        return !(char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      case \"alpha\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < UPPER_A_KEYCODE);\n      case \"alphanumeric\":\n        return !(char.charCodeAt(0) > LOWER_Z_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE);\n      default:\n        return true;\n    }\n  };\n  const handleOnChange = e => {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  const handleOnKeyDown = e => {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n  const handelOnInput = e => {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n  const onInputFocus = (index, event) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n  return {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  };\n};\nexport default useOTP;","map":{"version":3,"names":["useState","UPPER_A_KEYCODE","LOWER_Z_KEYCODE","ZERO_KEYCODE","NINE_KEYCODE","useOTP","_ref","autoFocus","value","otpType","onChange","OTPLength","activeInput","setActiveInput","getOtpValue","toString","split","handleOtpChange","otp","otpValue","join","focusInput","input","nextActiveInput","Math","max","min","focusInputByDirection","direction","arguments","length","undefined","changeActiveInputValue","_ref2","nextValue","handleOnPaste","e","data","preventDefault","clipboardData","process","env","NODE_ENV","slice","getData","pos","shift","filteredOtpValue","validCharIndex","charIndex","isValidateChar","char","charCodeAt","handleOnChange","target","handleOnKeyDown","key","handelOnInput","onInputFocus","index","event","select"],"sources":["/home/tmdev/Documents/csv-main/Frontend/src/components/userOtp/Hooks/useOTP.js"],"sourcesContent":["import { useState } from \"react\";\n\n// const LOWER_A_KEYCODE = 97;\nconst UPPER_A_KEYCODE = 65;\nconst LOWER_Z_KEYCODE = 122;\n// const UPPER_Z_KEYCODE = 90;\nconst ZERO_KEYCODE = 48;\nconst NINE_KEYCODE = 57;\n\nconst useOTP = ({ autoFocus, value, otpType, onChange, OTPLength }) => {\n  const [activeInput, setActiveInput] = useState(autoFocus ? 0 : -1);\n\n  const getOtpValue = () => (value ? value.toString().split(\"\") : []);\n\n  // Helper to return OTP from input\n  const handleOtpChange = otp => {\n    let otpValue = otp.join(\"\");\n    // if (otpType === \"number\") {\n    //   otpValue = +otpValue;\n    // }\n    onChange(otpValue);\n  };\n\n  // Focus on input by index\n  const focusInput = input => {\n    const nextActiveInput = Math.max(Math.min(OTPLength - 1, input), 0);\n    setActiveInput(nextActiveInput);\n  };\n\n  /**\n   * @typedef {\"next\" | \"prev\"} FocusDirections\n   * @param {FocusDirections} direction\n   */\n  const focusInputByDirection = (direction = \"next\") => {\n    focusInput(direction === \"next\" ? activeInput + 1 : activeInput - 1);\n  };\n\n  // Change OTP value at focused input\n  const changeActiveInputValue = ([nextValue]) => {\n    const otp = getOtpValue();\n    otp[activeInput] = nextValue;\n    handleOtpChange(otp);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = (e, data) => {\n    e.preventDefault();\n    const otp = getOtpValue();\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const clipboardData =\n      process.env.NODE_ENV === \"test\"\n        ? data.slice(0, OTPLength - activeInput).split(\"\")\n        : e.clipboardData\n            .getData(\"text/plain\")\n            .slice(0, OTPLength - activeInput)\n            .split(\"\");\n\n    // Paste data from focused input onwards\n    // eslint-disable-next-line no-plusplus\n    for (let pos = 0; pos < OTPLength; ++pos) {\n      if (pos >= activeInput && clipboardData.length > 0) {\n        otp[pos] = clipboardData.shift();\n      }\n    }\n\n    // Pass copied value through onChange rules\n    let filteredOtpValue = [otp.length];\n    let validCharIndex = 0;\n    for (let charIndex = 0; charIndex < otp.length; ++charIndex) {\n      if (isValidateChar(otp[charIndex])) {\n        filteredOtpValue[validCharIndex] = otp[charIndex];\n        validCharIndex++;\n      }\n    }\n\n    handleOtpChange(filteredOtpValue);\n  };\n\n  const isValidateChar = char => {\n    switch (otpType) {\n      case \"number\":\n        return !(\n          char.charCodeAt(0) > NINE_KEYCODE || char.charCodeAt(0) < ZERO_KEYCODE\n        );\n      case \"alpha\":\n        return !(\n          char.charCodeAt(0) > LOWER_Z_KEYCODE ||\n          char.charCodeAt(0) < UPPER_A_KEYCODE\n        );\n      case \"alphanumeric\":\n        return !(\n          char.charCodeAt(0) > LOWER_Z_KEYCODE ||\n          char.charCodeAt(0) < ZERO_KEYCODE\n        );\n      default:\n        return true;\n    }\n  };\n\n  const handleOnChange = e => {\n    if (isValidateChar(e.target.value)) {\n      changeActiveInputValue(e.target.value);\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow\n  const handleOnKeyDown = e => {\n    switch (e.key) {\n      case \"Backspace\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        focusInputByDirection(\"prev\");\n        break;\n      case \"Delete\":\n        e.preventDefault();\n        changeActiveInputValue(\"\");\n        break;\n      case \"ArrowLeft\":\n        e.preventDefault();\n        focusInputByDirection(\"prev\");\n        break;\n      case \"ArrowRight\":\n        e.preventDefault();\n        focusInputByDirection(\"next\");\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handelOnInput = e => {\n    if (e.target.value.length > 1) {\n      e.preventDefault();\n      focusInputByDirection(\"next\");\n    }\n  };\n\n  const onInputFocus = (index, event) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  return {\n    activeInput,\n    getOtpValue,\n    handleOnChange,\n    handleOnKeyDown,\n    handelOnInput,\n    handleOnPaste,\n    onInputFocus\n  };\n};\n\nexport default useOTP;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}